1) IC

Состоит из серверного компонента, так называемого интеграционного сервера (iнтеграцiйний сервер) (IС), и клиентского компонента, так называемого сервиса открывания окон (сервiс вiдкриття вiкон) (СВВ). 
Работа этих компонентов приведет дополнительную нагрузку на ААСС (http://www.avaya.com/ru/product/avaya-aura-contact-center/). 

Описание IС 
Серверный компонент (IС) работает как сервис Windows на сервере, на котором установлено JRE 1.7 (32-битная версия). IС предоставляет сервисы СВВ и CRM (сторонняя CRM), а также использует для работы сервисы ССТ (SDK для мониторинга событий системы компьютерной телефонии). 
IС состоит из СУБД, HTTP сервера, сервера соединений для СВВ (Socket сервер) и сервера работы с CCT. Настройка компонентов выполняется через библиотеку ISconfig.jar.

1) Компонент СУБД (Apache Derby DB 10.9.1.0) является интегрированным в IС. Он создает таблицу «APP.IS_USERS» в БД «IS_DB», которая используется для сопоставления имени пользователя Windows с agentLoginId AACC. IС предоставляет интерфейс для подключения к СУБД. Настройка СУБД (пользователи, derby.drda.startNetworkServer, derby.connection.requireAuthentication, derby.drda.host, derby.drda.portNumber) производится с помощью ISconfig.jar. 
2) Компонент HTTP сервера (jetty-8.1.4) является интегрированным в IС. Он предоставляет сервисы для интеграции с CRM. Настройка HTTP сервера (localIpAddress и webServerPort) производится с помощью ISconfig.jar. В ответ на запросы HTTP сервер генерирует XML по шаблону: 
<? xml version = "1.0"?> 
<is> 
    <response> 
       <agentLoginId> {agentLoginId оператора, к которому относится ответ} </ agentLoginId> 
       <тег_ответа> {Ответ} </ тег_ответа> 
       <errorCode> {Код ошибки} </ errorCode> 
       <errorDesc> {Описание ошибки, если есть} </ errorDesc> 
    </ response> 
    <start> {Unix запросе (в миллисекундах)} </ start> 
    <end> {Unix время ответа (в миллисекундах)} </ end> 
    <responseTime> {Время, за которое ИС обработал запрос (в миллисекундах)} </ responseTime> 
</ is> 
Элемента «<тег_ответа> {Ответ} </ тег_ответа>» может и не быть, если интерфейс не имеет выходных параметров (кроме <errorCode>). 
3) Компонент сервера соединений для СВВ (Socket сервер) является интегрированным в IС. Он предоставляет сервис для подключения и обмена информацией с СВВ. Настройка Socket сервера (localIpAddress и socketServerPort) производится с помощью ISconfig.jar. 
4) Компонент сервера для работы с CCT используется для получения и выполнения запросов информации с AACC. Настройка компонента (cctUserName, cctPassword, cctDomain, cctServiceHostAndPort, cctConsumerPort, cctCheckPeriod) производится с помощью ISconfig.jar. Пользователь, под которым будет выполняться взаимодействие с CCT, должен иметь доступ ко всем операторов, терминалов и адресов, которые будет обслуживать IС. Он также должен быть локальным пользователем Windows на каждом из серверов AACC и иметь одинаковые пароли. 
5) ISconfig.jar. Эта библиотека находится в директории lib и имеет единственный Java- метод loadConfig (), который загружает в jvm System.properties настройки для работы ИС. К настройкам также входят имена и пароли пользователей, порты и хосты, которые будут использовать ИС. Исполнитель реализует метод loadConfig () так, чтобы настройки читались из конфигурационного файла «app.conf». Исключением являются данные пользователей ССТ и БД, содержащиеся непосредственно в исходном коде. Пример файла и перечень настроек:
#CCT host and port CCC-AACC-MGT
cctServiceHostAndPort=CCC-AACC-MGT:9084
#CCT Consumer port. From this port service will connect to CCT SOA
cctConsumerPort=9091
#IS will check for CCT connection every <cctCheckPeriod> seconds
cctCheckPeriod=30
#Maximum connection count to CCMM DB (Cache DB) if 0 – no limit
ccmmDbConnectionMaxPoolSize=5
#Socket Server port. Socket Clients must connect to this port.
socketServerPort=81
#HTTP Server port
webServerPort=8080
#IP Address bind to (Used for HTTP Server, Socket Server and CCT Consumer
localIpAddress=10.44.209.5

# After Call Work code
afterCallWorkCode=1283476004
# URL Base for incoming calls, agent login, agent logout, transfers
urlBase=http://cc_crm.kyivstar.ua/crm/webagent/switch.phtml
# URL Base for Automated Outbound
urlBaseAO=http://cc_crm.kyivstar.ua/crm/webagent/switch_outbound.phtml

# Start in NetworkServer Mode
derby.drda.startNetworkServer=true
# Require uthentication for DB connection
derby.connection.requireAuthentication=true
# Derby Host
derby.drda.host=0.0.0.0
# Derby Port
derby.drda.portNumber=1527


2) AaccWebChat

Программное обеспечение состоит из: 
-модуля клиентской части, который используется для проведения веб-чат сессий; 
-модуля административной части, который позволяет настраивать каждую клиентскую часть. 

В каждой чат-комнате есть настройки группы навыков, на которые будет распределятся контакт. Тема чат сессии может быть введена в свободной форме или выбрана из списка. Для реализации маршрутизации на основе темы необходимо создать соответствующее количество чат-комнат (соответственно количеству групп навыков) и переводить клиента на необходимую. 

Клиентская часть устанавливается на веб-страницу бизнес-клиента с помощью HTML-тега iframe. например, 
<iframe src = "http: // <адрес> /? id = 402881ac4116bb18014116bc4af50000" 
width = "450" ​​height = "600" frameborder = "0"> </ iframe> 
где параметр "id" - уникальный идентификатор чата. 

Процесс инициации веб-чат сессии зависит от настроек каждого чата. 

Сначала проводится проверка рабочего времени и (если отмечено "Проверять доступность группы навыков") доступность группы навыков. Если проверка не прошла, пользователю отображается соответствующее сообщение страницы. При этом создается анонимная чат-сессия и сразу закрывается. Это нужно для того, чтобы вести статистику по данным контактам. При закрытии сессии указывается соответствующий код закрытия (ClosedReasonCode) - "SkillsetNotInService" или "NotWorkTime". Оба кода должны быть созданы в ССММ Admin.


3) TDU_ivrManager

IVR Manager – это программный продукт, который позволяет упростить создание и модификацию сценариев обработки входящих  и исходящих звонков.
Это дает два преимущества: создавать сценарии могут бизнес пользователи без участия технических специалистов.

Основные возможности:
Создание исходящих кампаний обзвона.
Создание входящих кампаний
Создание сценариев звонка (голосовых приложений) при помощи графического интерфейса.
Создание списков контактов
Сбор статистики по результатам кампаний
Просмотр и экспорт данных по результатам кампаний

Кампании
Кампания – это набор действий системы Интерактивного Речевого Взаимодействия (IVR), направленных на достижение определенной бизнес цели.
Кампания может включать в себя обработку входящих вызовов, совершение исходящих звонков или объединять работу как с входящими, так и исходящими взаимодействиями.

Исходящие взаимодействия.
Кампания, включающее совершение исходящих взаимодействий, включает в себя следующие обязательные элементы:
1. Списков контактов для обзвона (с номерами телефонов)
2. Алгоритма обзвона
Использование алгоритма обзвона позволяет рационально управлять взаимодействием с контактом:
1. Совершать дозвон на другой номер телефона, если при попытке получен сигнал:
a. Занято
b. Нет ответа
c. Не в сети
2. Вызывать различные  сценарии, если ответил:
a. Человек
b. Автоответчик*
c. Автоматический факс*
3. Задавать задержку для следующей попытки дозвона.
 
Так же задается максимальное количество одновременных исходящих вызовов и временные рамки.
Если во время проведения кампании в списке контактов появляются новые записи, по ним будет проведен обзвон.
* Необходимы лицензии на классификацию вызовов. Есть возможность не использовать классификацию вызовов, в этом случае эти пункты неактивны.

Входящие кампании
Входящая кампания состоит из:
1. Списка номеров, при звонке на которые вызывается сценарий для входящих вызовов.
2. Сценария для входящих вызовов.
Использование списка номеров позволяет упростить взаимодействие с системой, без необходимости изменения параметров приложений в Avaya Voice/Experience Portal.

Сценарии звонка
Создание сценария звонка осуществляется при помощи простого интерфейса, путем перетаскивания элементов из панели доступных элементов на древовидную структуру.

Каждый элемент  может иметь свойства и название.
Панель доступных элементов содержит:
Меню – это композитный элемент, который позволяет создавать IVR меню.
Аудио – используется для проигрывания аудиозаписи.
Итог – итоговая пометка результата.
Форма – ввод численной последовательности определенной длины.
Трансфер – перевод вызова на другой номер/очередь/приложение.
Перейти – переход на другой элемент дерева сценария.
Разъединить – разъединить звонок.

Списки контактов.
Создание списков контактов реализовано максимально гибко:  нет перечня обязательных полей и требований к их количеству. Одни и те же списки контактов можно использовать для многих кампаний, используя лишь необходимые поля при создании кампании.
Поддерживается загрузка из файлов формата CSV и Excel.


4) home-helper

Первый коммерческий проект. Подразумевалось создание сервиса-базы домашних мастеров. К сожалению, из-за недостатка финансирования, проект был заморожен.

Технологии:
Maven, Spring MVC, JSP, Servlets, JavaMail, JUnit, Log4J, Velocity, Tomcat, JDBC, MySQL. 

Содержание модулья home-helper-web (View) носило временный (рабочий) характер, т.к. UI должен был реализовывать отдельный человек.



