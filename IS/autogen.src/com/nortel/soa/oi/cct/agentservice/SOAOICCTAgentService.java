package com.nortel.soa.oi.cct.agentservice;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 2.6.1
 * 2014-01-31T11:01:25.765+03:00
 * Generated source version: 2.6.1
 *
 */
@WebServiceClient(name = "SOAOICCT_AgentService",
                  wsdlLocation = "http://ccc-aacc-mgt:9084/SOAOICCT/services/AgentService?wsdl",
                  targetNamespace = "http://www.nortel.com/soa/oi/cct/AgentService")
public class SOAOICCTAgentService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://www.nortel.com/soa/oi/cct/AgentService", "SOAOICCT_AgentService");
    public final static QName AgentService = new QName("http://www.nortel.com/soa/oi/cct/AgentService", "AgentService");
    static {
        URL url = null;
        try {
            url = new URL("http://"+System.getProperty("cctServiceHostAndPort","ccc-aacc-mgt")+"/SOAOICCT/services/AgentService?wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(SOAOICCTAgentService.class.getName())
                .log(java.util.logging.Level.INFO,
                     "Can not initialize the default wsdl from {0}", "http://ccc-aacc-mgt:9084/SOAOICCT/services/AgentService?wsdl");
        }
        WSDL_LOCATION = url;
    }

    public SOAOICCTAgentService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public SOAOICCTAgentService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public SOAOICCTAgentService() {
        super(WSDL_LOCATION, SERVICE);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public SOAOICCTAgentService(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public SOAOICCTAgentService(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public SOAOICCTAgentService(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     *
     * @return
     *     returns AgentService
     */
    @WebEndpoint(name = "AgentService")
    public AgentService getAgentService() {
        return super.getPort(AgentService, AgentService.class);
    }

    /**
     *
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns AgentService
     */
    @WebEndpoint(name = "AgentService")
    public AgentService getAgentService(WebServiceFeature... features) {
        return super.getPort(AgentService, AgentService.class, features);
    }

}
