package com.nortel.soa.oi.cct.connectionservice;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.xml.bind.annotation.XmlSeeAlso;

/**
 * This class was generated by Apache CXF 2.6.1
 * 2014-01-31T11:02:30.390+03:00
 * Generated source version: 2.6.1
 * 
 */
@WebService(targetNamespace = "http://www.nortel.com/soa/oi/cct/ConnectionService", name = "ConnectionService")
@XmlSeeAlso({com.nortel.soa.oi.cct.faults.ObjectFactory.class, com.nortel.soa.oi.cct.types.connectionservice.ObjectFactory.class, com.nortel.soa.oi.cct.types.ObjectFactory.class, org.xmlsoap.schemas.ws._2003._03.addressing.ObjectFactory.class, org.oasis_open.docs.wsrf._2004._06.wsrf_ws_basefaults_1_2_draft_01.ObjectFactory.class})
@SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
public interface ConnectionService {

    @WebResult(name = "ParkResponse", targetNamespace = "http://www.nortel.com/soa/oi/cct/types/ConnectionService", partName = "response")
    @WebMethod(operationName = "Park", action = "http://www.nortel.com/soa/oi/cct/ConnectionService/Park")
    public com.nortel.soa.oi.cct.types.connectionservice.ParkResponse park(
        @WebParam(partName = "parameters", name = "ParkRequest", targetNamespace = "http://www.nortel.com/soa/oi/cct/types/ConnectionService")
        com.nortel.soa.oi.cct.types.connectionservice.ParkRequest parameters
    ) throws ParkException, SessionNotCreatedException;

    @WebMethod(operationName = "Accept", action = "http://www.nortel.com/soa/oi/cct/ConnectionService/Accept")
    public void accept(
        @WebParam(partName = "parameters", name = "AcceptRequest", targetNamespace = "http://www.nortel.com/soa/oi/cct/types/ConnectionService")
        com.nortel.soa.oi.cct.types.connectionservice.ConnectionRequest parameters
    ) throws SessionNotCreatedException, AcceptException;

    @WebMethod(operationName = "Alert", action = "http://www.nortel.com/soa/oi/cct/ConnectionService/Alert")
    public void alert(
        @WebParam(partName = "parameters", name = "AlertRequest", targetNamespace = "http://www.nortel.com/soa/oi/cct/types/ConnectionService")
        com.nortel.soa.oi.cct.types.connectionservice.ConnectionRequest parameters
    ) throws SessionNotCreatedException, AlertException;

    @WebMethod(operationName = "StopRecording", action = "http://www.nortel.com/soa/oi/cct/ConnectionService/StartRecording")
    public void stopRecording(
        @WebParam(partName = "parameters", name = "StopRecordingRequest", targetNamespace = "http://www.nortel.com/soa/oi/cct/types/ConnectionService")
        com.nortel.soa.oi.cct.types.connectionservice.RecordingRequest parameters
    ) throws StopRecordingException, SessionNotCreatedException;

    @WebResult(name = "GetConnectionCapabilitiesResponse", targetNamespace = "http://www.nortel.com/soa/oi/cct/types/ConnectionService", partName = "response")
    @WebMethod(operationName = "GetConnectionCapabilities", action = "http://www.nortel.com/soa/oi/cct/ConnectionService/GetConnectionCapabilities")
    public com.nortel.soa.oi.cct.types.connectionservice.ConnectionCapabilitiesResponse getConnectionCapabilities(
        @WebParam(partName = "parameters", name = "GetConnectionCapabilitiesRequest", targetNamespace = "http://www.nortel.com/soa/oi/cct/types/ConnectionService")
        com.nortel.soa.oi.cct.types.connectionservice.ConnectionRequest parameters
    ) throws SessionNotCreatedException, GetConnectionCapabilitiesException;

    @WebResult(name = "GetRecordingStateReasonResponse", targetNamespace = "http://www.nortel.com/soa/oi/cct/types/ConnectionService", partName = "response")
    @WebMethod(operationName = "GetRecordingStateReason", action = "http://www.nortel.com/soa/oi/cct/ConnectionService/GetRecordingStateReason")
    public com.nortel.soa.oi.cct.types.Reason getRecordingStateReason(
        @WebParam(partName = "parameters", name = "GetRecordingStateReasonRequest", targetNamespace = "http://www.nortel.com/soa/oi/cct/types/ConnectionService")
        com.nortel.soa.oi.cct.types.connectionservice.ConnectionRequest parameters
    ) throws SessionNotCreatedException, GetRecordingStateReasonException;

    @WebResult(name = "GetContactResponse", targetNamespace = "http://www.nortel.com/soa/oi/cct/types/ConnectionService", partName = "response")
    @WebMethod(operationName = "GetContact", action = "http://www.nortel.com/soa/oi/cct/ConnectionService/GetContact")
    public com.nortel.soa.oi.cct.types.connectionservice.ContactResponse getContact(
        @WebParam(partName = "parameters", name = "GetContactRequest", targetNamespace = "http://www.nortel.com/soa/oi/cct/types/ConnectionService")
        com.nortel.soa.oi.cct.types.connectionservice.ConnectionRequest parameters
    ) throws GetContactException, SessionNotCreatedException;

    @WebResult(name = "GetVersionResponse", targetNamespace = "http://www.nortel.com/soa/oi/cct/types/ConnectionService", partName = "response")
    @WebMethod(operationName = "GetVersion", action = "http://www.nortel.com/soa/oi/cct/ConnectionService/GetVersion")
    public com.nortel.soa.oi.cct.types.GetVersionResponse getVersion(
        @WebParam(partName = "parameters", name = "GetVersionRequest", targetNamespace = "http://www.nortel.com/soa/oi/cct/types/ConnectionService")
        com.nortel.soa.oi.cct.types.GetVersionRequest parameters
    ) throws SessionNotCreatedException, GetVersionException;

    @WebResult(name = "GetTerminalConnectionsResponse", targetNamespace = "http://www.nortel.com/soa/oi/cct/types/ConnectionService", partName = "response")
    @WebMethod(operationName = "GetTerminalConnections", action = "http://www.nortel.com/soa/oi/cct/ConnectionService/GetTerminalConnections")
    public com.nortel.soa.oi.cct.types.connectionservice.TerminalConnectionsResponse getTerminalConnections(
        @WebParam(partName = "parameters", name = "GetTerminalConnectionsRequest", targetNamespace = "http://www.nortel.com/soa/oi/cct/types/ConnectionService")
        com.nortel.soa.oi.cct.types.connectionservice.ConnectionRequest parameters
    ) throws SessionNotCreatedException, GetTerminalConnectionsException;

    @WebResult(name = "GetStateResponse", targetNamespace = "http://www.nortel.com/soa/oi/cct/types/ConnectionService", partName = "response")
    @WebMethod(operationName = "GetState", action = "http://www.nortel.com/soa/oi/cct/ConnectionService/GetState")
    public com.nortel.soa.oi.cct.types.connectionservice.ConnectionStateResponse getState(
        @WebParam(partName = "parameters", name = "GetStateRequest", targetNamespace = "http://www.nortel.com/soa/oi/cct/types/ConnectionService")
        com.nortel.soa.oi.cct.types.connectionservice.ConnectionRequest parameters
    ) throws SessionNotCreatedException, GetStateException;

    @WebResult(name = "GetRecordingStateResponse", targetNamespace = "http://www.nortel.com/soa/oi/cct/types/ConnectionService", partName = "response")
    @WebMethod(operationName = "GetRecordingState", action = "http://www.nortel.com/soa/oi/cct/ConnectionService/GetRecordingState")
    public com.nortel.soa.oi.cct.types.connectionservice.RecordingState getRecordingState(
        @WebParam(partName = "parameters", name = "GetRecordingStateRequest", targetNamespace = "http://www.nortel.com/soa/oi/cct/types/ConnectionService")
        com.nortel.soa.oi.cct.types.connectionservice.ConnectionRequest parameters
    ) throws SessionNotCreatedException, GetRecordingStateException;

    @WebMethod(operationName = "Disconnect", action = "http://www.nortel.com/soa/oi/cct/ConnectionService/Disconnect")
    public void disconnect(
        @WebParam(partName = "parameters", name = "DisconnectRequest", targetNamespace = "http://www.nortel.com/soa/oi/cct/types/ConnectionService")
        com.nortel.soa.oi.cct.types.connectionservice.ConnectionRequest parameters
    ) throws SessionNotCreatedException, DisconnectException;

    @WebResult(name = "GetAddressResponse", targetNamespace = "http://www.nortel.com/soa/oi/cct/types/ConnectionService", partName = "response")
    @WebMethod(operationName = "GetAddress", action = "http://www.nortel.com/soa/oi/cct/ConnectionService/GetAddress")
    public com.nortel.soa.oi.cct.types.connectionservice.AddressResponse getAddress(
        @WebParam(partName = "parameters", name = "GetAddressRequest", targetNamespace = "http://www.nortel.com/soa/oi/cct/types/ConnectionService")
        com.nortel.soa.oi.cct.types.connectionservice.ConnectionRequest parameters
    ) throws SessionNotCreatedException, GetAddressException;

    @WebResult(name = "RedirectResponse", targetNamespace = "http://www.nortel.com/soa/oi/cct/types/ConnectionService", partName = "response")
    @WebMethod(operationName = "Redirect", action = "http://www.nortel.com/soa/oi/cct/ConnectionService/Redirect")
    public com.nortel.soa.oi.cct.types.connectionservice.RedirectResponse redirect(
        @WebParam(partName = "parameters", name = "RedirectRequest", targetNamespace = "http://www.nortel.com/soa/oi/cct/types/ConnectionService")
        com.nortel.soa.oi.cct.types.connectionservice.RedirectRequest parameters
    ) throws SessionNotCreatedException, RedirectException;

    @WebMethod(operationName = "StartRecording", action = "http://www.nortel.com/soa/oi/cct/ConnectionService/StartRecording")
    public void startRecording(
        @WebParam(partName = "parameters", name = "StartRecordingRequest", targetNamespace = "http://www.nortel.com/soa/oi/cct/types/ConnectionService")
        com.nortel.soa.oi.cct.types.connectionservice.RecordingRequest parameters
    ) throws SessionNotCreatedException, StartRecordingException;

    @WebMethod(operationName = "Reject", action = "http://www.nortel.com/soa/oi/cct/ConnectionService/Reject")
    public void reject(
        @WebParam(partName = "parameters", name = "RejectRequest", targetNamespace = "http://www.nortel.com/soa/oi/cct/types/ConnectionService")
        com.nortel.soa.oi.cct.types.connectionservice.ConnectionRequest parameters
    ) throws RejectException, SessionNotCreatedException;
}
