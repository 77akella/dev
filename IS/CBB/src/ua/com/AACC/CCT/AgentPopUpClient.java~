package ua.com.teledes.AACC.CCT;

import java.awt.AWTException;
import java.awt.Desktop;
import java.awt.Image;
import java.awt.SystemTray;
import java.awt.Toolkit;
import java.awt.TrayIcon;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.io.RandomAccessFile;
import java.net.Socket;
import java.net.SocketException;
import java.net.SocketTimeoutException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.nio.channels.FileChannel;
import java.nio.channels.FileLock;
import java.nio.charset.Charset;
import java.util.Calendar;
import java.util.Properties;

/**
 *
 * @author atretyakov
 */
public class AgentPopUpClient {

    public static final String CBB_VERSION = "1.1.0.4";
    private static TrayIcon trayIcon;
    private static File f;
    private static FileChannel channel;
    private static FileLock lock;
    private static final Desktop desktop = java.awt.Desktop.getDesktop();
    private static String userName = "";
    private static String serverAddr = "10.44.209.5";
    private static int PORT = 81;
    private static int retryTime = 30000;
    private static Socket socket;
    private static BufferedReader in;
    private static PrintWriter out;
    private static String lastAction;
//    private static long lastPingTime = System.currentTimeMillis();

    public static void checkLock(boolean exitOnLock) throws FileNotFoundException, IOException {
        f = new File(AgentPopUpClient.class.getSimpleName() + ".lock");
        // Check if the lock exist
        if (f.exists()) {
            // if exist try to delete it
            f.delete();
        }
        // Try to get the lock
        channel = new RandomAccessFile(f, "rw").getChannel();
        lock = channel.tryLock();
        if (lock == null) {
            // File is lock by other application
            channel.close();
            if (exitOnLock) {
                log("Another process already started. Exiting...");
                System.exit(0);
            }
        }

        // Add shutdown hook to release lock when application shutdown

//            ShutdownHook shutdownHook = new ShutdownHook();
//            Runtime.getRuntime().addShutdownHook(shutdownHook);

    }

    public static void init() throws IOException {
        Properties configFile = new Properties();
        userName = System.getProperty("user.name");
        String configFilePath = System.getProperty("user.dir") + File.separator + "app.conf";
        try {
            configFile.load(new FileInputStream(configFilePath));
        } catch (IOException ex) {
            configFile.setProperty("serverAddr", serverAddr);
            configFile.setProperty("serverPort", PORT + "");
            configFile.setProperty("retryTime", retryTime / 1000 + "");
            FileOutputStream fileOutputStream = new FileOutputStream(configFilePath);
            configFile.store(fileOutputStream, "### Automaticaly generated by CBB version " + CBB_VERSION);
            String errorMessage = "Создан Конфигурациооный файл " + configFilePath;
            trayIcon.displayMessage("Проверьте настройки",
                    errorMessage,
                    TrayIcon.MessageType.WARNING);
            fileOutputStream.close();
            //throw new IOException(errorMessage, ex);
        }
        try {
            serverAddr = configFile.getProperty("serverAddr").trim();
            log("[Config] Server address is " + serverAddr);
        } catch (Exception e) {
        }
        try {
            PORT = Integer.valueOf(configFile.getProperty("serverPort").trim());
            log("[Config] Server port is " + PORT);
        } catch (Exception e) {
        }
        try {
            retryTime = Integer.valueOf(configFile.getProperty("retryTime").trim()) * 1000;
            log("[Config] Retry time is " + retryTime + " ms.");
        } catch (Exception e) {
        }

        trayIcon.setToolTip("Попытка соединения с сервером " + serverAddr + ":" + PORT);
        socket = new Socket(serverAddr, PORT);
        in = new BufferedReader(new InputStreamReader(socket.getInputStream(), "UTF-8"), 1);
        out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(socket.getOutputStream(), Charset.forName("UTF-8")), 1), true);
        log("Client Started. version=" + CBB_VERSION);
    }

    public static void main(String[] args) throws InterruptedException {
        try {
            log("args.length=" + args.length);
            checkLock(args.length == 0);
        } catch (FileNotFoundException ex) {
            log(ex.getMessage());
        } catch (IOException ex) {
            log(ex.getMessage());
        }
        systemTray();
        if (args.length > 0 && args[0].trim().equals("update")) {
            trayIcon.displayMessage("Приложение обновлено.",
                    "Вы используете версию " + CBB_VERSION + ".",
                    TrayIcon.MessageType.INFO);
        }
        while (true) {
            try {
                init();
            } catch (IOException ex) {
                ex.printStackTrace(System.err);
            }
            try {
                log("Checking for update. CBB version is " + CBB_VERSION);
                checkForUpdate();
            } catch (SocketException ex) {
                log("SocketException:" + ex.getMessage());
            } catch (IOException ex) {
                log("IOException:" + ex.getMessage());
            }
            try {
                systemTrayIconGray();
                init();
//                out.println("supported: ping, pong");
                out.println("login: " + userName);
                String loginResponse = in.readLine();
                if (loginResponse.startsWith("OK")) {
                    systemTrayIconBlue();
                    log(loginResponse);
                    trayIcon.setToolTip(
                            "Соединение: ОК\n"
                            + "Агент:      " + userName + " (" + loginResponse.substring(2) + ")\n"
                            + "Версия:     " + CBB_VERSION);
                } else {
                    trayIcon.displayMessage("Ошибка аутентификации",
                            loginResponse,
                            TrayIcon.MessageType.WARNING);
                    throw new IOException(loginResponse);
                }
            } catch (IOException ex) {
                trayIcon.setToolTip("[Ошибка соединения] " + ex.getMessage());
                log("[Connection Error] " + ex.getMessage());
                systemTrayIconRed();
                Thread.sleep(retryTime);
                continue;
            }
            try {
                String str;
//                lastPingTime = System.currentTimeMillis();
//                    socket.setKeepAlive(true);
//                while (socket.isConnected()) {
//                    socket.setSoTimeout(5000);
//                    log("!socket.isClosed()");
//                    try {
                    while ((str = in.readLine()) != null) {
                        log("SERVER ---> " + str);
                        if (str.trim().startsWith("ping")) {
                            send("pong");
                            continue;
                        }
                        if (str.trim().startsWith("pong")) {
//                                lastPingTime = System.currentTimeMillis();
                            continue;
                        }
                        if (str.equals(lastAction)) {
                            continue;
                        } else {
                            lastAction = str;
                        }
                        try {
                            if (str.startsWith("exec:")) {
                                exec(str.substring(5).trim());
                                continue;
                            }

                            if (str.startsWith("open:")) {
                                if (!desktop.isSupported(java.awt.Desktop.Action.OPEN)) {
                                    log("Desktop doesn't support the open action (fatal)");
                                }
                                try {
                                    desktop.open(new File(str.substring(5).trim()));
                                } catch (Exception e) {
                                    log("Desktop open ----- Filed: " + e.getMessage());
                                }
                            }

                            if (str.startsWith("browse:")) {
                                String url = str.substring(7).trim();
                                browse(url);
                            }
                        } catch (Exception e) {
                            e.printStackTrace(System.err);
                        }
                        if (str.trim().equals("END")) {
                            throw new IOException("Disconnecting on SERVER command");
                        }
                        if (str.trim().equals("EXIT")) {
                            log("Exiting on SERVER command");
                            unlockFile();
                            System.exit(0);
                        }
                    }
//                    } catch (SocketTimeoutException socketTimeoutException) {
////                        pingServer();
//                    }
//                }
            } catch (IOException e) {
                log("IO Exception: " + e.getMessage());
            } finally {
                systemTrayIconRed();
                try {
                    send("END");
                } catch (Exception e) {
                    System.err.println("Socket not closed properly");
                }
                try {
                    socket.close();
                } catch (IOException e) {
                    System.err.println("Socket not closed");
                }
            }
        }
    }

    private static void log(String msg) {
        System.out.println("[" + Calendar.getInstance().getTime() + "] " + msg);
    }

    public static void send(String msg) {
        out.println(msg);
        out.flush();
        log("SERVER <--- " + msg);
    }

    private static void systemTray() {
        if (SystemTray.isSupported()) {
            SystemTray tray = SystemTray.getSystemTray();
            Image image;
            if (new File(System.getProperty("user.dir") + File.separator + "tray_gray.gif").exists()) {
                image = Toolkit.getDefaultToolkit().getImage(System.getProperty("user.dir") + File.separator + ("tray_gray.gif"));
            } else {
                image = Toolkit.getDefaultToolkit().getImage(AgentPopUpClient.class.getResource("tray_gray.gif"));
            }

            trayIcon = new TrayIcon(image);
            trayIcon.setImageAutoSize(true);

            try {
                tray.add(trayIcon);
            } catch (AWTException e) {
                System.err.println("TrayIcon could not be added.");
            }

        } else {
            log("ERROR! System Tray is not supported");
        }
    }

    private static void systemTrayIconGray() {
        Image image;
        if (new File(System.getProperty("user.dir") + File.separator + "tray_gray.gif").exists()) {
            image = Toolkit.getDefaultToolkit().getImage(System.getProperty("user.dir") + File.separator + ("tray_gray.gif"));
        } else {
            image = Toolkit.getDefaultToolkit().getImage(AgentPopUpClient.class.getResource("tray_gray.gif"));
        }
        trayIcon.setImage(image);
    }

    private static void systemTrayIconBlue() {
        Image image;
        if (new File(System.getProperty("user.dir") + File.separator + "tray_blue.gif").exists()) {
            image = Toolkit.getDefaultToolkit().getImage(System.getProperty("user.dir") + File.separator + ("tray_blue.gif"));
        } else {
            image = Toolkit.getDefaultToolkit().getImage(AgentPopUpClient.class.getResource("tray_blue.gif"));
        }
        trayIcon.setImage(image);
    }

    private static void systemTrayIconRed() {
        Image image;
        if (new File(System.getProperty("user.dir") + File.separator + "tray_red.gif").exists()) {
            image = Toolkit.getDefaultToolkit().getImage(System.getProperty("user.dir") + File.separator + ("tray_red.gif"));
        } else {
            image = Toolkit.getDefaultToolkit().getImage(AgentPopUpClient.class.getResource("tray_red.gif"));
        }
        trayIcon.setImage(image);
    }

    public static void unlockFile() {
        // release and delete file lock
        try {
            if (lock != null) {
                lock.release();
                channel.close();
                f.delete();
            }
            if (f.exists()) {
                // if exist try to delete it
                f.delete();
            }
        } catch (IOException e) {
            log("[ERROR] Failed to delete lock file: " + e.getMessage());
        }
    }

    private static boolean exec(String command) {
        try {
            Runtime.getRuntime().exec(command);
            return true;
        } catch (Exception e) {
            log("Runtime exec ----- Filed: " + e.getMessage());
            try {
                new ProcessBuilder(new String[]{"cmd.exe", "/C", "start " + command}).start();
                return true;
            } catch (Exception ex) {
                log("ProcessBuilder exec ----- Filed: " + ex.getMessage());
                return false;
            }
        }
    }

    private static void checkForUpdate() throws SocketException, IOException, InterruptedException {
        if (out == null || socket == null) {
            throw new IOException("checkForUpdate: no connection");
        }
        out.println("version: " + CBB_VERSION);
        socket.setSoTimeout(1000);
        try {
            String versionResponse = in.readLine();
            if (versionResponse.trim().startsWith("update:")) {
                URL updateUrl = new URL(versionResponse.trim().substring(7).trim());
                log("Got new update from " + updateUrl.toString());
                InputStream input = updateUrl.openStream();
                File source = new File(System.getProperty("user.dir") + File.separator + "CBB.jar");
                FileOutputStream sourceOutputStream = new FileOutputStream(source);
                int n = 0;
                byte[] buffer = new byte[2 * 1024];
                while (-1 != (n = input.read(buffer))) {
                    sourceOutputStream.write(buffer, 0, n);
                }
                sourceOutputStream.close();
                input.close();
                log("Updated successfuly");
                String updateCommand =
                        //                        (System.getProperty("java.home", null) == null ? "javaw" : "\"" + System.getProperty("java.home") + File.separator + "bin" + File.separator + "javaw\"")
                        "javaw -Duser.dir=\"" + System.getProperty("user.dir") + "\" "
                        + "-jar \"" + System.getProperty("user.dir") + File.separator + "CBB.jar\" update";
                log("Update command:");
                log(updateCommand);
                unlockFile();
                if (exec(updateCommand)) {
                    log("Exiting for an update");
                    Thread.sleep(500);
                    checkLock(true);
                } else {
                    log("CBB require restart after update");
                    trayIcon.displayMessage("Приложение обновлено.",
                            "При следующем запуске СВВ Вы будете испольтзовать новую версию.",
                            TrayIcon.MessageType.INFO);
                }
            }
        } catch (SocketTimeoutException ste) {
        } finally {
            socket.setSoTimeout(0);
        }
    }

//    private static void pingServer() throws InterruptedException, IOException {
//        if ((System.currentTimeMillis() - lastPingTime) > (20 * 1000)) {
//            send("ping");
//        }
//        if ((System.currentTimeMillis() - lastPingTime) > (120 * 1000)) {
//            log("Ping filed: timediff=" + (System.currentTimeMillis() - lastPingTime));
//            trayIcon.setToolTip("[Ошибка соединения], сервер не ответил на ping.");
//            systemTrayIconRed();
//            throw new IOException("Closing socket due inactive ping.");
//        }
//    }
    private static void browse(String url) {
        url = url.replaceAll(" ", "%20");
        if (!desktop.isSupported(java.awt.Desktop.Action.BROWSE)) {
            log("Desktop doesn't support the browse action (fatal)");
            trayIcon.displayMessage("Ошибка","Desktop doesn't support the browse action (fatal)", TrayIcon.MessageType.ERROR);
        }
        try {
            desktop.browse(new URI(url));
        } catch (URISyntaxException e) {
            log("Desktop browse ----- Filed: " + e.getMessage());
        } catch (IOException e) {
            log("Desktop browse ----- Filed: " + e.getMessage());
        }
    }
}
