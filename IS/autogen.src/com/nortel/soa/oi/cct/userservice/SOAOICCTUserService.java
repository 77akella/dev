package com.nortel.soa.oi.cct.userservice;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.BindingProvider;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 2.6.1 2014-01-31T11:05:01.812+03:00
 * Generated source version: 2.6.1
 *
 */
@WebServiceClient(name = "SOAOICCT_UserService",
wsdlLocation = "http://ccc-aacc-mgt:9084/SOAOICCT/services/UserService?wsdl",
targetNamespace = "http://www.nortel.com/soa/oi/cct/UserService")
public class SOAOICCTUserService extends Service {

    public final static URL WSDL_LOCATION;
    public final static QName SERVICE = new QName("http://www.nortel.com/soa/oi/cct/UserService", "SOAOICCT_UserService");
    public final static QName UserService = new QName("http://www.nortel.com/soa/oi/cct/UserService", "UserService");

    static {
        URL url = null;
        try {
            url = new URL("http://"+System.getProperty("cctServiceHostAndPort","ccc-aacc-mgt")+"/SOAOICCT/services/UserService?wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(SOAOICCTUserService.class.getName())
                    .log(java.util.logging.Level.INFO,
                    "Can not initialize the default wsdl from {0}", "http://ccc-aacc-mgt:9084/SOAOICCT/services/UserService?wsdl");
        }
        WSDL_LOCATION = url;
    }

    public SOAOICCTUserService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public SOAOICCTUserService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public SOAOICCTUserService() {
        super(WSDL_LOCATION, SERVICE);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public SOAOICCTUserService(WebServiceFeature... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public SOAOICCTUserService(URL wsdlLocation, WebServiceFeature... features) {
        super(wsdlLocation, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public SOAOICCTUserService(URL wsdlLocation, QName serviceName, WebServiceFeature... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     *
     * @return returns UserService
     * @since 1.1 added connectionTimeout and receiveTimeout = 5min
     */
    @WebEndpoint(name = "UserService")
    public UserService getUserService() {
        com.nortel.soa.oi.cct.userservice.UserService port = super.getPort(UserService, UserService.class);
        //Set timeout until a connection is established
        ((BindingProvider) port).getRequestContext().put("javax.xml.ws.client.connectionTimeout", "1000");

        //Set timeout until the response is received
        ((BindingProvider) port).getRequestContext().put("javax.xml.ws.client.receiveTimeout", "300000");
        return port;
    }

    /**
     *
     * @param features A list of {@link javax.xml.ws.WebServiceFeature} to
     * configure on the proxy. Supported features not in
     * the <code>features</code> parameter will have their default
     * values.
     * @return returns UserService
     * @since 1.1 added connectionTimeout and receiveTimeout = 5min
     */
    @WebEndpoint(name = "UserService")
    public UserService getUserService(WebServiceFeature... features) {
        com.nortel.soa.oi.cct.userservice.UserService port = super.getPort(UserService, UserService.class, features);
        //Set timeout until a connection is established
        ((BindingProvider) port).getRequestContext().put("javax.xml.ws.client.connectionTimeout", "1000");

        //Set timeout until the response is received
        ((BindingProvider) port).getRequestContext().put("javax.xml.ws.client.receiveTimeout", "300000");
        return port;
    }
}
